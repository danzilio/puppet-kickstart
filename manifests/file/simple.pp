# == Defined Type: kickstart::file::simple
#
#   This type can be used to generate an advanced kickstart file using the Puppet DSL.
#
# === Parameters:
# [*filename*]
#   Namevar. String. The path to the kickstart file generated by this resource.
#
# [*commands*]
#   Hash. A hash of commands with arguments as the value. Arguments can be an
#   array. Each argument will be printed on a newline prefaced by the command.
#   For example:
#
#     kickstart { '/tmp/kickstart.ks':
#       commands => {
#         part => [
#           '/boot --ondisk sda --size 128 --fstype ext3',
#           'pv.01 --size 1 --ondisk sda --grow',
#         ]
#       }
#     }
#
#   Would result in:
#
#     part /boot --ondisk sda --size 128 --fstype ext3
#     part pv.01 --size 1 --ondisk sda --grow
#
# [*repos*]
#   Hash. A hash of yum repositories to be used in the kickstart. The key should
#   be the name of the repository while the value should be a hash of arguments
#   to the Kickstart 'repo' command.
#
#   Example:
#
#     kickstart { '/tmp/kickstart.ks':
#       repos => {
#         base => {
#           baseurl => 'http://mirrors.kernel.org/centos/7/os/x86_64/'
#         }
#       }
#     }
#
# [*packages*]
#   Array. An array of package names.
# [*partition_configuration*]
#   Hash. A separate section to define your partition configuration. This
#   follows the same rules as the 'commands' parameter.
# [*fragments*]
#   Hash. An hash of fragments to be evaluated in the template. These are
#   passed as an argument to the `template` function. The hash must have the
#   section name ('pre', 'post') as the key, and an array of paths to ERB
#   templates as the value. Fragments can access the data passed to the
#   $fragment_variables parameter using the instance variable
#   @fragment_variables inside the template.
#
#   Example:
#
#     kickstart { '/tmp/kickstart.ks':
#       fragments => {
#         'post' => [
#           'kickstart_profile/configure_network.erb',
#           'kickstart_profile/install_puppet.erb'
#         ]
#       }
#     }
#
# [*fragment_variables*]
#   Hash. A hash of settings to be consumed by your fragment templates.
# [*template*]
#   String. A path to an ERB template to use for the kickstart file.
define kickstart::file::simple (
  $filename                = $title,
  $partition_configuration = false,
  $url                     = '--url http://mirror.centos.org/centos/7/os/x86_64',
  $lang                    = 'en_US.UTF-8',
  $keyboard                = 'us',
  $network                 = '--device eth0 --bootproto dhcp',
  $hostname                = 'kickstarted',
  $domain                  = 'example.com',
  $rootpw                  = 'password',
  $rootpw_iscrypted        = false,
  $firewall                = '--service=ssh',
  $authconfig              = '--enableshadow --passalgo=sha512',
  $selinux_mode            = '--enforcing',
  $timezone                = '--utc Etc/UTC',
  $volgroup                = 'vg_kickstarted',
  $bootloader_location     = '--location=mbr',
  $repos                   = {
    'base' => {
      'baseurl' => 'http://mirror.centos.org/centos/7/os/x86_64',
    },
  },
  $packages_to_add         = [
    '@core',
    '@server-policy',
    'ntpdate',
    'ntp',
    'wget',
    'screen',
    'git',
    'perl',
    'openssh-clients',
    'man',
    'system-config-network-tui',
    'mlocate',
    'bind-utils',
    'traceroute',
    'mailx',
  ],
  $packages_to_remove      = [],
  $post_log                = '/root/ks-post.log',
  $puppet_repo             = 'https://yum.puppetlabs.com/el/7/products/x86_64/puppetlabs-release-7-11.noarch.rpm',
  $banner_url              = undef,
  $relayhost               = undef,

  $template                = 'kickstart/kickstart_simple.erb',
) {
  validate_string($template)
  validate_absolute_path($filename)

  if $repos { validate_hash($repos) }
  if $packages_to_add { validate_array($packages_to_add) }
  if $packages_to_remove { validate_array($packages_to_remove) }
  if $partition_configuration { validate_hash($partition_configuration) }

  file { $filename:
    ensure  => present,
    content => template($template),
  }

}
